-- Create the profiles table
CREATE TABLE public.profiles (
  id uuid NOT NULL PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE,
  first_name text,
  last_name text,
  email text UNIQUE,
  phone text,
  id_card_number text UNIQUE,
  school_id uuid REFERENCES public.schools(id) ON DELETE SET NULL,
  is_admin boolean DEFAULT false NOT NULL,
  is_sales boolean DEFAULT false NOT NULL,
  addresses jsonb DEFAULT '[]'::jsonb NOT NULL,
  cart_items jsonb DEFAULT '[]'::jsonb, -- Added cart_items
  created_at timestamptz DEFAULT now() NOT NULL,
  updated_at timestamptz DEFAULT now() NOT NULL
);

-- Enable Row Level Security
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

-- Function to create a profile for a new user
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER
SET search_path = public -- Ensured this is a function option
AS $$
DECLARE
  v_is_admin boolean;
  v_is_sales boolean;
BEGIN
  -- Determine roles based on email
  IF new.email = 'admin@site.com' THEN
    v_is_admin := true;
    v_is_sales := false; -- Admin is not sales by default here, adjust if admin can also be sales
  ELSIF new.email = 'ventas@site.com' THEN
    v_is_admin := false;
    v_is_sales := true;
  ELSE
    -- For other users, try to get roles from raw_user_meta_data or default to false
    v_is_admin := COALESCE((new.raw_user_meta_data ->> 'is_admin')::boolean, false);
    v_is_sales := COALESCE((new.raw_user_meta_data ->> 'is_sales')::boolean, false);
  END IF;

  INSERT INTO public.profiles (id, email, first_name, last_name, id_card_number, school_id, is_admin, is_sales, cart_items, created_at, updated_at)
  VALUES (
    new.id,
    new.email,
    new.raw_user_meta_data ->> 'firstName',
    new.raw_user_meta_data ->> 'lastName',
    new.raw_user_meta_data ->> 'idCardNumber',
    CASE 
      WHEN new.raw_user_meta_data ->> 'schoolId' IS NOT NULL AND new.raw_user_meta_data ->> 'schoolId' <> '' THEN (new.raw_user_meta_data ->> 'schoolId')::uuid
      ELSE NULL
    END,
    v_is_admin, -- Use the determined v_is_admin
    v_is_sales, -- Use the determined v_is_sales
    '[]'::jsonb, -- Default empty cart_items
    NOW(), -- Explicitly set created_at
    NOW()  -- Explicitly set updated_at
  );

  -- Auto-confirm email for predefined admin and sales accounts
  IF new.email = 'admin@site.com' OR new.email = 'ventas@site.com' THEN
    UPDATE auth.users
    SET email_confirmed_at = NOW()
    WHERE id = new.id;
  END IF;

  RETURN new;
END;
$$;

-- Trigger to call the function on new user signup
DROP TRIGGER IF EXISTS on_auth_user_created ON auth.users; -- Drop existing trigger first
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE PROCEDURE public.handle_new_user();

-- Trigger for updated_at on profiles table
-- Assumes trigger_set_timestamp function is created from 00_setup.txt
DROP TRIGGER IF EXISTS set_profiles_updated_at ON public.profiles; -- Drop existing trigger first
CREATE TRIGGER set_profiles_updated_at
BEFORE UPDATE ON public.profiles
FOR EACH ROW
EXECUTE FUNCTION public.trigger_set_timestamp();

-- Add Indexes
-- CREATE INDEX IF NOT EXISTS idx_profiles_school_id ON public.profiles (school_id); -- Removed unused index
CREATE INDEX IF NOT EXISTS idx_profiles_is_admin ON public.profiles (is_admin);
CREATE INDEX IF NOT EXISTS idx_profiles_is_sales ON public.profiles (is_sales);
-- email and id_card_number are already UNIQUE, so they have indexes.

-- Helper functions that depend on the 'profiles' table
-- Function to check if the current authenticated user is an admin
CREATE OR REPLACE FUNCTION public.is_claims_admin()
RETURNS boolean
LANGUAGE sql STABLE SECURITY DEFINER
SET search_path = public
AS $$
  SELECT EXISTS (
    SELECT 1
    FROM public.profiles
    WHERE id = auth.uid() AND is_admin = true
  );
$$;

-- Function to check if the current authenticated user is a sales person
CREATE OR REPLACE FUNCTION public.is_claims_sales()
RETURNS boolean
LANGUAGE sql STABLE SECURITY DEFINER
SET search_path = public
AS $$
  SELECT EXISTS (
    SELECT 1
    FROM public.profiles
    WHERE id = auth.uid() AND is_sales = true
  );
$$;