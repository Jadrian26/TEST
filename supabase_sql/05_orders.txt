-- Create sequence for display_order_id
CREATE SEQUENCE public.order_id_seq START 10000;

-- Create the orders table
CREATE TABLE public.orders (
  id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  display_order_id text UNIQUE NOT NULL, -- For user-friendly IDs like #12345
  user_id uuid NOT NULL REFERENCES public.profiles(id) ON DELETE CASCADE,
  order_date date DEFAULT current_date NOT NULL,
  status text NOT NULL, -- e.g., 'Processing', 'Shipped', 'Delivered', 'Cancelled'
  total_amount numeric(10, 2) NOT NULL,
  shipping_address_json jsonb, -- Stores Address object, nullable for pickup
  delivery_method text NOT NULL, -- 'pickup' or 'delivery'
  placed_by_user_id uuid REFERENCES public.profiles(id) ON DELETE SET NULL,
  customer_name_for_order text,
  customer_id_card_for_order text,
  created_at timestamptz DEFAULT now() NOT NULL,
  updated_at timestamptz DEFAULT now() NOT NULL
);

-- Enable Row Level Security
ALTER TABLE public.orders ENABLE ROW LEVEL SECURITY;

-- Function and Trigger to auto-generate display_order_id
CREATE OR REPLACE FUNCTION public.generate_display_order_id()
RETURNS TRIGGER AS $$
BEGIN
  NEW.display_order_id = '#' || nextval('public.order_id_seq');
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER set_display_order_id
BEFORE INSERT ON public.orders
FOR EACH ROW
EXECUTE FUNCTION public.generate_display_order_id();

-- Trigger for updated_at timestamp
-- Assumes trigger_set_timestamp function is created from 00_setup.txt
CREATE TRIGGER set_orders_updated_at
BEFORE UPDATE ON public.orders
FOR EACH ROW
EXECUTE FUNCTION public.trigger_set_timestamp();

-- Add Indexes
CREATE INDEX IF NOT EXISTS idx_orders_user_id ON public.orders (user_id);
CREATE INDEX IF NOT EXISTS idx_orders_placed_by_user_id ON public.orders (placed_by_user_id);
CREATE INDEX IF NOT EXISTS idx_orders_status ON public.orders (status);
CREATE INDEX IF NOT EXISTS idx_orders_order_date ON public.orders (order_date DESC);
CREATE INDEX IF NOT EXISTS idx_orders_created_at ON public.orders (created_at DESC);
-- display_order_id is UNIQUE, so it has an index.
